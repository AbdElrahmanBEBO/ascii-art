const AsciiArt = require('./AsciiArt');
import { asci, alphabets } from './AsciiArt';

const testing = [
  {
    input: 'A1B2C3D4E5F', width: 1, height: 1, alphabets: alphabets[0],
    expect: [
      "A B C D E F"
    ]
  },
  {
    input: 'E', width: 4, height: 5, alphabets: alphabets[1],
    expect: [ 
      "### ",
      "#   ",
      "##  ",
      "#   ",
      "### "
    ],
  },
  {
    input: 'MANHATTAN', width: 4, height: 5, alphabets: alphabets[1],
    expect: [ 
      "# #  #  ### # #  #  ### ###  #  ### ",
      "### # # # # # # # #  #   #  # # # # ",
      "### ### # # ### ###  #   #  ### # # ",
      "# # # # # # # # # #  #   #  # # # # ",
      "# # # # # # # # # #  #   #  # # # # "
    ]
  },
  {
    input: 'M@NH@TT@N', width: 4, height: 5, alphabets: alphabets[1],
    expect: [
      "# # ### ### # # ### ### ### ### ### ",
      "###   # # # # #   #  #   #    # # # ",
      "###  ## # # ###  ##  #   #   ## # # ",
      "# #     # # # #      #   #      # # ",
      "# #  #  # # # #  #   #   #   #  # # "
    ],
  },
  {
    input: 'MAN HAT TAN', width: 4, height: 5, alphabets: alphabets[1],
    expect: [
      "# #  #  ### ### # #  #  ### ### ###  #  ### ",
      "### # # # #   # # # # #  #    #  #  # # # # ",
      "### ### # #  ## ### ###  #   ##  #  ### # # ",
      "# # # # # #     # # # #  #       #  # # # # ",
      "# # # # # #  #  # # # #  #   #   #  # # # # "
    ],
  },
  {
    input: 'MANHATTAN', width: 20, height: 11, alphabets: alphabets[2],
    expect: [
      " .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------. ",
      "| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |",
      "| | ____    ____ | || |      __      | || | ____  _____  | || |  ____  ____  | || |      __      | || |  _________   | || |  _________   | || |      __      | || | ____  _____  | |",
      "| ||_   \\  /   _|| || |     /  \\     | || ||_   \\|_   _| | || | |_   ||   _| | || |     /  \\     | || | |  _   _  |  | || | |  _   _  |  | || |     /  \\     | || ||_   \\|_   _| | |",
      "| |  |   \\/   |  | || |    / /\\ \\    | || |  |   \\ | |   | || |   | |__| |   | || |    / /\\ \\    | || | |_/ | | \\_|  | || | |_/ | | \\_|  | || |    / /\\ \\    | || |  |   \\ | |   | |",
      "| |  | |\\  /| |  | || |   / ____ \\   | || |  | |\\ \\| |   | || |   |  __  |   | || |   / ____ \\   | || |     | |      | || |     | |      | || |   / ____ \\   | || |  | |\\ \\| |   | |",
      "| | _| |_\\/_| |_ | || | _/ /    \\ \\_ | || | _| |_\\   |_  | || |  _| |  | |_  | || | _/ /    \\ \\_ | || |    _| |_     | || |    _| |_     | || | _/ /    \\ \\_ | || | _| |_\\   |_  | |",
      "| ||_____||_____|| || ||____|  |____|| || ||_____|\\____| | || | |____||____| | || ||____|  |____|| || |   |_____|    | || |   |_____|    | || ||____|  |____|| || ||_____|\\____| | |",
      "| |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | |",
      "| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |",
      " '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' "
    ],
  },
]

testing.map(e => {
  console.log(asci(e.width,e.height,e.input,e.alphabets))
  test(e.input, () => expect(asci(e.width,e.height,e.input,e.alphabets)).toBe(e.expect.join('\n')))  
})
